- title = 'Glacier Archives'
- content_for :title, title
%h1= content_for(:title)
= render partial: 'menus/admin_tabs'

.row
  .col-sm-12
    %strong DB Restoration Notes
    %br
    %ol
      %li
        If doing a test restore, it makes sense to first restore a snapshot
        so you get the proper roles and permissions.
      %li
        ssh to the server
      %li
        Run
        %tt gpg --list-secret-keys
        You need the private openpath.host key which is not kept on the server
        under normal circumstances.
      %li
        From the ansible git repository, find the private key. You'll need
        github access, the git-crypt key, and the Open Path vault key to
        execute this command successfully.
        %tt ansible-vault view --vault-id=openpath.vpass inventory/group_vars/openpath/vault.yml
      %li
        %tt cat > openpath.asc
        Then paste in the private key.
        %tt vim openpath.asc
        Remove leading spaces, which is an artifact of the value having been in a yaml file.
        %tt :%s/^  //g
        %tt :wq
        %tt gpg --import openpath.asc
      %li
        Verify you imported it. Ignore the signing key that might have been
        there already. "Open Path Encryptor" is the correct key.
        %tt gpg --list-secret-keys

      %li
        Update your ~/.pgpass file so you don't need a password to connect to the database.
        It will look similar to this:
        %tt host.rds.com:*:*:username:password

      %li
        Open a tmux session to run the restore

      %li
        Change directories to rails root.

      %li
        Find The archive ID you want to restore
        %tt export RAILS_ENV=production
        %tt bundle exec rails runner 'ap Glacier::Archive.order(:created_at).all'

      %li
        You must provide the archive ID and database name. The archive ID can
        be the primary key from the glacier_archives table or the really long
        archive ID passed to us from Amazon. Both are in the glacier_archives
        table.
        Add the third argument if you have a different host.
        %tt bundle exec rake glacier:restore_database[:archive_id, :database_name, :provided_db_host]
        e.g.
        %tt bundle exec rake glacier:backup:restore_database[123,restore_some_warehouse_app,endpoint.rds.amazonaws.com]

      %li
        On first running, it will create the database, but you'll need to
        connect as the RDS superuser to add database extensions. Get the credentials from the ansible vault
        %tt ansible-vault view --vault-id=openpath.vpass inventory/group_vars/containers/vault.yml
        %br
        CREATE EXTENSION hstore;
        %br
        CREATE EXTENSION fuzzystrmatch;
        %br
        CREATE EXTENSION pg_stat_statements;
        %br
        CREATE EXTENSION pgcrypto;

      %li
        Double check disk space. If you're restoring something big, consider
        removing databases first from the newly restored snapshot.


      %li
        Following adding these extensions, rerun the original rake task but flag that you've added the extensions:
        e.g.
        %tt export ADDED_EXTENSIONS=true
        %tt bundle exec rake glacier:backup:restore_database[123,restore_some_warehouse_app,endpoint.rds.amazonaws.com]

      %li
        If you get an Aws::Glacier::Errors::InsufficientCapacityException
        mentioning insufficient capacity to process this Expedited request, do
        this:
        %tt export GLACIER_JOB_TIER=Standard
        and retry

      %li
        When the process gets to the decryption part, you'll have to paste the gpg key password (found in the ansible vault file).

      %li
        Delete the private key when you're done.
        gpg --delete-private-key

      %li
        Use something like the following to restore files like tar gzipped and encrypted archives:
        %tt bundle exec rake glacier:backup:restore_file[32,/home/blackman]

- if @pagy.count.positive?
  .text-right.mb-4
    Total size stored in Glacier
    %strong
      = number_to_human_size @total_size
  = render 'common/pagination_top', item_name: 'archive'
  .table-responsive
    %table.table.table-striped.table-hover{style: 'table-layout: fixed; word-wrap: break-word;'}
      %thead
        %tr
          %th Vault
          %th Archive
          %th Process
          %th Location
          %th Status
          %th Size
          %th Notes
        %tbody
          - @archives.each do |archive|
            %tr
              %td= @vaults[archive.glacier_vault_id].try(:name)
              %td= archive.archive_name
              %td
                = archive.upload_started_at
                - if archive.upload_finished_at
                  - run_time = distance_of_time_in_words(archive.upload_finished_at - archive.upload_started_at)
                  = " - #{archive.upload_finished_at}"
                  %br
                  (#{run_time})
                - else
                  = " - incomplete"

              %td= archive.location
              %td= archive.status
              %td= number_to_human_size archive.size_in_bytes
              %td= archive.notes
  = render 'common/pagination_bottom', item_name: 'archive'
- else
  .none-found No archives found.
