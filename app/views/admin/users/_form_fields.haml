.row
  .col-sm-6
    %h3 User Information
    .form-inputs.well
      .row
        .col-sm-10
          = f.input :first_name, required: true
      .row
        .col-sm-10
          = f.input :last_name, required: true
      .row
        .col-sm-8
          = f.input :email, as: :email, required: true
      .row
        .col-sm-4
          = f.input :phone
      .row
        .col-sm-10
          = f.input :agency_id, collection: @agencies, label_method: :name, value_method: :id, required: false, include_blank: 'Unknown', input_html: {class: :select2}
      - if @user.two_factor_enabled?
        .row
          .col-sm-8
            %p This user has enabled Two-Factor authentication.  If this is preventing login, you can turn it off below.  Before you do, you should ensure the request is coming from the actual user.  Once off, the user will need to re-enable it.
            = f.input :otp_required_for_login, as: :select, label: 'Require two-factor authentication', include_blank: false, input_html: {class: [:select2, :j2Fa]}

  .col-sm-6
    .form--checkbox-groups
      %h3 Notifications
      .well
        %p Which notifications should this user receive?
        = f.input :receive_file_upload_notifications, label: 'File uploads'
        - if can_edit_vspdat? # you can only assign this if you can also edit them
          = f.input :notify_on_vispdat_completed, label: "VI-SPDAT submissions", as: :boolean
        - if GrdaWarehouse::DataSource.authoritative.exists?
          = f.input :notify_on_client_added, label: "Authoritative clients added", as: :boolean
        = f.input :notify_on_anomaly_identified, label: "Anomalies identified"
    .form--expiration
      %h3 Account Life-cycle
      .well
        = f.input :expired_at, as: :date_picker, label: 'Account Expiration Date', hint: 'If an expiration date is present, the user will not be able to login after that date.  Active accounts should be blank.'
    - if @user.training_required?
      .form--user-training
        %h3 User Training
        .well
          %p
            Course Progress:
            %i #{@user.training_status}
          - unless @user.last_training_completed.present?
            = f.input :training_completed, label: 'Check to OVERRIDE course completion requirement'
    - if @user&.db_credential&.present?
      .form--db-credential
        %h3 Direct Database Access (De-identified)
        .well
          %p
            = "#{@user.name} currently has direct database access to de-identified data."
          %p
            - if @user.can_access_report?(url: 'warehouse_reports/custom/db_access')
              #{@user.name} currently has access to the Direct Database Access report.
              %br
              To remove database access, you must first prevent this user from accessing the Direct Database Access report.
            - else
              #{@user.name} does not have access to the Direct Database Access report.
              %br
              Revoking access below will completely remove DB access
              = link_to revoke_db_access_admin_user_path(@user), method: :delete, data: { confirm: 'Revoking direct database access will block this user from running queries on the database.' }, class: 'btn btn-danger mt-4' do
                %i.icon-cross
                Revoke DB Access
= render '/users/user_viewable_entities', f: f, roles: Role.editable
