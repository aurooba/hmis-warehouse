#!/usr/bin/env ruby

require 'json'
require 'aws-sdk-ec2'
require 'byebug'

class Portainer
  OPEN_COMMAND = ENV.fetch('OPEN_COMMAND') { 'xdg-open' }

  def run!
    ensure_profile_and_ip
    setup_tunnels
    boot
  end

  def ensure_profile_and_ip
    my_ip = `dig +short myip.opendns.com @resolver1.opendns.com`.chomp

    raise 'Check you VPN. Your public IP seems incorrect' unless my_ip.match?(/^(54\.85|64.223)/)

    raise 'set AWS_PROFILE' if ENV['AWS_PROFILE'].nil?
  end

  def setup_tunnels
    system('tmux new-session -s portainer -d')

    system('tmux rename-window -t portainer:0 tunnel-0')
    instances.each.with_index do |_, i|
      next if i.zero?

      system("tmux new-window -t portainer:#{i} -n tunnel-#{i}")
    end

    system("tmux new-window -t portainer:#{instances.length} -n run")

    instances.each.with_index do |instances, i|
      system("tmux send-keys -t portainer:#{i} \"ssh ec2-user@#{instances.public_ip_address} -L0.0.0.0:2376#{i}:127.0.0.1:2376 -v\" C-m")
    end
  end

  def boot
    local_ip =
      if ENV['USER'] == 'blackman'
        `ifconfig docker0 | grep 'inet addr:' | cut -d: -f2 | awk '{print $1}'`.chomp
      else
        'host.docker.internal'
      end

    config = [
      {
        'Name' => 'localhost',
        'URL' => 'unix:///var/run/docker.sock',
        'TLS' => false,
      },
    ]

    instances.each.with_index do |instance, i|
      # FIXME: Look at name tag and show that too
      config << {
        'Name' => "tunnel #{i} - #{instance.public_ip_address} - #{instance.instance_id} - #{instance.instance_lifecycle || 'non-spot'}",
        'URL' => "tcp://#{local_ip}:2376#{i}",
        'TLS' => false,
      }
    end

    json = config.to_json

    File.open('/tmp/portainer.endpoints.json', 'w') do |f|
      f.write json
    end

    # Save container that stopped:
    # docker container ls -a | grep portainer
    # ID=the one you want to save
    # docker commit $ID my-portainer:latest

    # exec("ssh -t #{HOST} 'docker run --rm -ti shell /bin/sh'")

    # ['my-portainer', 'portainer/portainer'].each do |image|

    image = 'portainer/portainer'

    id = `docker image ls -q #{image}:latest`.chomp

    raise 'nothing found' if id.nil?

    puts "found #{id} for #{image}"

    cmd = "docker run -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock --mount type=bind,src=/tmp/portainer.endpoints.json,dst=/tmp/portainer.endpoints.json #{image}:latest --external-endpoints /tmp/portainer.endpoints.json"

    system("tmux send-keys -t portainer:#{instances.length} '#{cmd}' C-m")

    system("#{OPEN_COMMAND} http://localhost:9000")
  end

  private

  def instances
    return @instances unless @instances.nil?

    results = ec2.describe_instances(
      filters: [
        {
          name: 'tag:Cluster',
          values: ['openpath'],
        },
        {
          name: 'instance-state-name',
          values: ['running'],
        },
      ],
    )

    @instances = results.
      reservations.
      flat_map(&:instances).
      sort_by(&:public_ip_address)
  end

  def ec2
    @ec2 ||= Aws::EC2::Client.new
  end
end

Portainer.new.run!
