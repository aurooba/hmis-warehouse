:css
  .wide-line {
    stroke-width: 3px
  }
Dashboard
%table.street-2-home-summary.w-100.mb-6
  %tbody
    %tr
      - bg_color = @config.total_color
      %td.all-clients{ colspan: @report.summary_counts.count - 1, style: "background-color: #{bg_color}; color: #{@config.foreground_color(bg_color)};"}
        .count= link_to number_with_delimiter(@report.summary_counts['total'][:count]), details_boston_reports_warehouse_reports_street_to_homes_path(@report.filter.for_params.merge(sets: ['total'])), style: "color: #{@config.foreground_color(bg_color)};"
        .label{style: "color: #{@config.foreground_color(@config.total_color)};"}= @report.summary_counts['total'][:label]
    %tr
      - @report.summary_counts.except('total').each.with_index do |(cohort, data), i|
        - bg_color = @config["breakdown_1_color_#{i}"]
        %td{ class: "cohort-#{i}", style: "background-color: #{bg_color}; color: #{@config.foreground_color(bg_color)};"}
          .count= link_to number_with_delimiter(data[:count]), details_boston_reports_warehouse_reports_street_to_homes_path(@report.filter.for_params.merge(sets: [cohort])), style: "color: #{@config.foreground_color(bg_color)};"
          .label{ style: "color: #{@config.foreground_color(bg_color)};" }= data[:label]

.d-flex
  .w-50
    .ml-0.mr-4
      .well
        %h2 Total Clients by Stage
        #total-clients-by-stage-chart
        #total-clients-by-stage-chart-legend.d-flex.m-4
      - max_value = @report.counts_by_stage['columns'].map(&:last).max
      = content_for :page_js do
        :javascript
          let total_chart = bb.generate({
            data: #{@report.counts_by_stage.to_json.html_safe},
            bindto: '#total-clients-by-stage-chart',
            bar: {
              padding: 20,
              width: 85,
            },
            legend: {
              contents: {
                bindto: '#total-clients-by-stage-chart-legend',
                template: "<div class='d-flex mr-4'><div style='padding:5px; height: 14px; width: 26px; background-color:{=COLOR}; margin: auto; border-radius: 10px;'>&nbsp;</div><div class='m-2'>{=TITLE}</div></div>"
              }
            },
            axis: {
              x: {
                type: 'category',
                categories: ['Stage'],
                show: false
              },
              y: {
                tick: {
                  culling: {
                    lines: false,
                    max: 3
                  },
                  values: [0, #{max_value}]
                }
              }
            }
          });

  .w-50
    .mr-0.ml-8
      .well
        .d-flex
          %h2.client-status-header Clients Housed
          .client-status-switcher.btn-group.btn-group-toggle.btn-sm.ml-auto{ data: { toggle: :buttons }}
            %label.btn.btn-secondary.active
              %input#housed{ type: :radio, name: :client_status, checked: :checked}
              Housed
            %label.btn.btn-secondary
              %input#matched{ type: :radio, name: :client_status}
              Matched


        #client-status-chart
        #client-status-chart-legend.d-flex.m-4
      - max_value = @report.counts_by_stage['columns'].map(&:last).max
      = content_for :page_js do
        :javascript
          let housed_data = #{@report.housed_by_cohort.to_json.html_safe};
          let matched_data = #{@report.matched_by_cohort.to_json.html_safe};
          let status_chart = bb.generate({
            data: housed_data,
            bindto: '#client-status-chart',
            legend: {
              contents: {
                bindto: '#client-status-chart-legend',
                template: "<div class='d-flex mr-4'><div style='padding:5px; height: 14px; width: 26px; background-color:{=COLOR}; margin: auto; border-radius: 10px;'>&nbsp;</div><div class='m-2'>{=TITLE}</div></div>"
              }
            },
            // TODO: regions: [{ start: '2022-01-01', end: '2022-01-31'}]
            line: {
              point: false,
              classes: ['wide-line'],
            },
            axis: {
              x: {
                type: "timeseries",
                tick: {
                  format: "%b '%y"
                }
              },
              y: {
                tick: {
                  culling: {
                    lines: false,
                    max: 3
                  },
                  format: function(x) {
                    return Math.round(x)
                  }
                }
              }
            }
          });
          $('.client-status-switcher').on('change', function(e) {
            if($(e.target).attr('id') == 'housed') {
              $('.client-status-header').text('Clients Housed')
              status_chart.load(housed_data);
            } else {
              $('.client-status-header').text('Clients Matched')
              status_chart.load(matched_data);
              console.log(matched_data)
            }
          });
