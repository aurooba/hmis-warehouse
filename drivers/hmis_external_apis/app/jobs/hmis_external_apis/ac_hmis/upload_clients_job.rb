###
# Copyright 2016 - 2023 Green River Data Analysis, LLC
#
# License detail: https://github.com/greenriver/hmis-warehouse/blob/production/LICENSE.md
###

# job =  HmisExternalApis::AcHmis::UploadClientsJob.new
module HmisExternalApis::AcHmis
  class UploadClientsJob < BaseJob
    include NotifierConfig
    include Rails.application.routes.url_helpers

    attr_accessor :state

    def perform(mode = 'clients_with_mci_ids_and_address')
      setup_notifier('HMIS Upload Clients')
      if Exporters::ClientExportUploader.can_run?
        case mode
        when 'clients_with_mci_ids_and_address' then clients_with_mci_ids_and_address
        when 'hmis_csv_export' then hmis_csv_export
        when 'project_crosswalk' then project_crosswalk
        else
          raise "invalid item to upload: #{mode}"
        end
        self.state = :success
      else
        self.state = :not_run
        Rails.logger.info "Not running #{mode} due to lack of credentials"
      end
    rescue StandardError => e
      puts e.message
      self.state = :failed
      @notifier.ping('Failure in upload clients job', { exception: e })
      Rails.logger.fatal e.message
    end

    private

    def clients_with_mci_ids_and_address
      export = Exporters::ClientExport.new
      export.run!

      uploader = Exporters::ClientExportUploader.new(
        filename_format: '%Y-%m-%d-clients.zip',
        io_streams: [
          OpenStruct.new(
            name: 'Client.csv',
            io: export.output,
          ),
        ],
      )

      uploader.run!
    end

    def hmis_csv_export
      # FIXME: Not sure what this should be a hash of. I'll refactor to take content
      # into account in a later step if that's needed. Could be a hash of the
      # current time or content or sorted list of unique ids in the file. Or,
      # maybe something else.
      hash = SecureRandom.hex(8)

      # FIXME: what user should I use? Can I make exports not need a user?
      user = User.first

      # FIXME: I'm not sure if I should hard-code 2024. I don't have enough context.
      version = '2024'

      data_source = HmisExternalApis::AcHmis.data_source

      filter = ::Filters::HmisExport.new(data_source_ids: [data_source.id], version: version, user_id: user.id)

      # FIXME: I think this is supposed to enqueue a
      # HmisCsvTwentyTwentyFour::ExportJob but I'm getting nothing in the test
      # environment
      filter.schedule_job(report_url: warehouse_reports_hmis_exports_url)

      # FIXME: need to know how to get job and/or resulting export so I can poll for the results
      sleep 1

      # FIXME: I don't know how to find the export generated by the filter
      # above or if I used the code correctly.
      export = ::GrdaWarehouse::HmisExport.first!

      # FIXME: The story said the report will be at the url above (which I
      # think is warehouse_reports/hmis_exports) but it seems convoluted to
      # have to make a web request here. I think I should probably be able to
      # use the previous line's logic somehow

      # FIXME: All the files in
      # https://files.hudexchange.info/resources/documents/HMIS-CSV-Format-Specifications-2024.pdf
      # requested. I can't make a local export yet, so I can't confirm yet.

      uploader = Exporters::ClientExportUploader.new(
        filename_format: "%Y-%m-%d-HMIS-#{hash}-hudcsv.zip",
        # FIXME: I believe this content is a string of zipped content, but I haven't confirmed that.
        pre_zipped_data: export.content,
      )

      uploader.run!
    end

    def project_crosswalk
      # Use these for reference:
      # app/views/warehouse_reports/hmis_cross_walks/index.xlsx.axlsx
      # app/controllers/warehouse_reports/hmis_cross_walks_controller.rb

      # FIXME: what are we crosswalking exactly? Here's some code that might be useful:
      # @filter = same as the method above?
      # @projects = GrdaWarehouse::Hud::Project.active_during(@filter.range).distinct
      # @projects = @projects.where(id: @filter.effective_project_ids) if @filter.any_effective_project_ids?
      # @projects = @projects.with_project_type(@filter.project_type_ids) if @filter.project_type_numbers.any?
      # @organizations = GrdaWarehouse::Hud::Organization.joins(:projects).merge(@projects).distinct

      # Can be similar to HmisExternalApis::AcHmis::Exporters::ClientExport

      # FIXME: stubs for now
      orgs = OpenStruct.new(output:     StringIO.new('Warehouse ID,HMIS Organization ID,Organization Name,Data Source,Date Updated'))
      projects = OpenStruct.new(output: StringIO.new('Warehouse ID,HMIS ProjectID,Project Name,HMIS Organization ID,Organization Name,Data Source,Date Updated'))

      uploader = Exporters::ClientExportUploader.new(
        filename_format: '%Y-%m-%d-cross-walks.zip',
        io_streams: [
          OpenStruct.new(
            name: 'Organizations-cross-walk.csv',
            io: orgs.output,
          ),
          OpenStruct.new(
            name: 'Project-cross-walk.csv',
            io: projects.output,
          ),
        ],
      )

      uploader.run!
    end
  end
end
