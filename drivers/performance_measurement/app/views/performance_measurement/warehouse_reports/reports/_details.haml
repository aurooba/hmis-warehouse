- markdown = Redcarpet::Markdown.new(::InlineHtml)
- category = @report.detail_category_for(key)
- title = "#{category} | #{@report.detail_title_for(key)}"
- system_class_name = "jSystemLevelChart_#{key}"
- result = @report.result_for(key)
.performance-measurement
  .p-4{ class: "performance-measurement--highlight-#{@report.highlight_id(category)}" }
    %h1= title
    %p= @report.filter.date_range_words
  .d-flex.m-4
    .goal
      %h3 Goal
      %p= raw markdown.render(@report.detail_goal_description_for(key))
    .calculation.ml-6
      %h3 Calculation
      %p= @report.detail_calculation_description_for(key)

  .p-4.mb-4{ class: "performance-measurement--highlight-light-#{@report.highlight_id(category)}" }
    %h2 System Level
  .d-flex
    .w-50= render 'warehouse_reports/indicator', indicator: result
    .w-50
      .c-chart--vertical-bar{ class: system_class_name, data: { chart: result.data_for_system_level_bar.to_json }}
      - label = @report.detail_denominator_label_for(key)
      - if label.present?
        .d-flex.text-center.ml-4
          .w-50
            %strong= result.comparison_numerator
            of
            = label
            %strong= result.comparison_denominator
          .w-50
            %strong= result.reporting_numerator
            of
            = label
            %strong= result.reporting_denominator
  - if @report.detail_column_for(key) != :system
    = render 'performance_measurement/warehouse_reports/reports/projects', key: key, category: category


= content_for :page_js do
  :javascript
    $(document).ready(function(){
      var data = $('.#{system_class_name}').data('chart');
      var max = Math.max(...data.columns[1].slice(1));
      var include_percent = #{result.primary_unit.starts_with?('%')}
      data.labels['format'] = function (v, id, i, texts) {
        if(v < max * 0.15) {
          return '';
        }
        if(include_percent) {
          return d3.format(".0%")(v / 100)
        } else {
          return d3.format(",.2r")(v)
        }
      }
      var chart = bb.generate({
        data: data,
        axis: {
          x: { type: 'category' },
          y: { tick: { stepSize: 1, count: 3, format: d3.format('d') }}
        },
        size: { height: 150 },
        legend: { show: false },
        bindto: '.#{system_class_name}'
      });
    });
