- label = @report.detail_denominator_label_for(key)
.d-flex.justify-content-around.mb-4
  .col-4
    = render 'warehouse_reports/indicator', indicator: @report.detail_indicator_result(result, key)
  - if label.present? && show_label_detail
    .d-flex.col-8.justify-content-end
      .col-6
        .c-chart--vertical-bar{ class: class_name, data: { chart: result.data_for_system_level_bar.to_json }}
      .col-5.d-flex.align-items-center.mb-6
        .card.p-3
          .mb-2
            %span.mr-2 #{result.report_year}:
            %strong= result.reporting_numerator
            of
            = label
            %strong= result.reporting_denominator
          .mb-0
            %span.mr-2 #{result.comparison_year}:
            %strong= result.comparison_numerator
            of
            = label
            %strong= result.comparison_denominator
  - else
    .d-flex.col-4
      .c-chart--vertical-bar{ class: class_name, data: { chart: result.data_for_system_level_bar.to_json }}

= content_for :page_js do
  :javascript
    $(document).ready(function() {
      const data = $('.#{class_name}').data('chart');
      const max = Math.max(...data.columns[1].slice(1));
      const includePercent = #{result.percentage?}
      const goal = #{@report.detail_goal_for(key)};
      const axisMax = max < goal ? goal : undefined;
      const tooltipTitles = #{result.titles_for_system_level_bar_tooltip.to_json.html_safe}

      data.labels.format = function (v, id, i, texts) {
        if (v < (axisMax || max) * 0.15) {
          return '';
        }
        if (includePercent) {
          return d3.format(".0%")(v / 100);
        } else {
          return d3.format(",d")(v);
        }
      }
      
      
      const chart = bb.generate({
        data: data,
        axis: {
          rotated: includePercent,
          x: { type: 'category' },
          y: {
            tick: {
              stepSize: 1,
              count: 3,
              format: function(x) { return `${d3.format('d')(x)}${includePercent ? '%' : ''}`}
            },
            max: max < goal ? goal : undefined,
          },
        },
        grid: { y: { lines: [{ value: goal }] } },
        size: { height: 150 },
        legend: { show: false },
        tooltip: {
          format: {
            title: function(i) {
              return tooltipTitles[i];
            }
          }
        },
        bindto: '.#{class_name}'
      });
      d3.select('.#{class_name} .bb-ygrid-line line').style('stroke-width', 2)
      d3.select('.#{class_name} .bb-ygrid-line line').style('stroke-dasharray', 2)
    });
