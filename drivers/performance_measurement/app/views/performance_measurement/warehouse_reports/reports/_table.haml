.well.p-0
  %table.table.table-striped.mb-0
    %thead
      %th Category
      %th.nobr Sub Category
      %th Relevancy
      %th Metric
      %th Passed
      %th Count
      %th Unit
      %th Change over Year
      %th Direction
    %tbody
      - @report.summary_table.each.with_index do |(title, group), i|
        - rowspan = group.keys.count + group.values.map(&:values).flatten.count + 1
        - class_name = if pdf then "performance-measurement--highlight-light-#{i + 1} p-2" else '' end
        %tr.c-table__row{ class: "c-table__row--highlight-#{i + 1}" }
          %th.level{rowspan: rowspan }
            %div{ class: class_name }= title
        - group.each do |sub_category, sub_group|
          %tr.c-table__row{ class: "c-table__row--highlight-#{i + 1}" }
            - rowspan = sub_group.count + 1
            %th.level{rowspan: rowspan }
              %div{ class: class_name }= sub_category
          - sub_group.each do |row|
            - key = row.first
            - indicator = @report.result_for(key)
            - if indicator
              - column = row.last[:column]
              %tr
                %td.nobr
                  - if column == :both
                    System and Project Level
                  - else
                    = column.to_s.titleize
                %td
                  - options = { title: @report.detail_goal_description_for(indicator.field.to_sym), content: @report.detail_calculation_description_for(indicator.field.to_sym), toggle: :popover, boundary: :window, trigger: :focus, placement: :bottom }
                  = options[:title]
                  - if options[:title].present? && goal_popover
                    %a{ role: :button, tabindex: 0, data: options }
                      %i.icon-info
                  -# - else
                  -#   %p.mt-2.text-small
                  -#     Calculation:
                  -#     %br
                  -#     = @report.detail_calculation_description_for(indicator.field.to_sym)
                %td.text-center
                  .c-indicator__passed{ class: indicator[:passed] ? "pass" : "fail" }
                    = checkmark_or_x(indicator[:passed], size: :sm, symbol_names: { true => 'ok-circled', false => 'cancel-circled2' }, wrapper_classes: {true => 'pass', false => 'fail'}, style: :svg)
                %td.nobr.font-size-md= link_to(number_with_delimiter(indicator[:primary_value]), performance_measurement_warehouse_reports_report_details_path(@report, key: key), target: :_blank)
                %td.nobr= indicator[:primary_unit]
                %td.nobr #{number_with_delimiter(indicator[:secondary_value])}%
                %td.text-center
                  .c-indicator__change-icon= change_direction_icon(indicator[:direction])
            - else
              %tr
                %td
                  Error displaying:
                  = key
