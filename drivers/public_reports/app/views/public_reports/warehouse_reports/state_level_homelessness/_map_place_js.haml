:javascript
  class CocMap {
    constructor({ elementId, shapes, state, metrics, colors, max_rate, max_count }) {
      this.initInfoBox = this.initInfoBox.bind(this);
      this.style = this.style.bind(this);
      this.updateInfo = this.updateInfo.bind(this);
      this.clearInfo = this.clearInfo.bind(this);
      this.onEachFeature = this.onEachFeature.bind(this);
      this.updateMetrics = this.updateMetrics.bind(this);
      this.max_rate = max_rate;
      this.max_count = max_count;
      this.elementId = elementId;
      this.shapes = shapes;
      this.state = state;
      this.colors = colors;
      this.metrics = metrics;
      this.showingData = false;
      const mapOptions = {
        minZoom: 5,
        maxZoom: 9,
        zoomSnap: 0.2,
        zoomControl: false,
        scrollWheelZoom: false,
      };
      this.strokeColor = '#aaa';

      this.highlightedFeatures = [];

      this.map = new L.Map(this.elementId, mapOptions);

      L.control
        .zoom({
          position: 'bottomleft',
        })
        .addTo(this.map);

      // Do not show basemap
      // const osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'
      // const osmAttrib = 'Map data Â© <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
      // const osm = new L.TileLayer(osmUrl, {attribution: osmAttrib})
      // this.map.addLayer(osm)

      const geoJSONOptions = {
        style: this.style,
        onEachFeature: this.onEachFeature,
      };

      // L.geoJSON(this.state, geoJSONOptions).addTo(this.map);
      this.geojson = L.geoJSON(this.shapes, geoJSONOptions).addTo(this.map);
      this.map.fitBounds(this.geojson.getBounds());

      this.initInfoBox();
    }

    initInfoBox() {
      this.info = L.control();
      this.info.update = (props) => {
        let innerHTML = '';
        let hidden = true;
        if (props != null) {
          const { id, name, place, metric } = props;
          const rate = this.metrics[name]?.rate
          const count = this.metrics[name]?.count
          const population = this.metrics[name]?.overall_population
          innerHTML = `<h4>${name}</h4><div class="rate">${rate}% of overall homeless population (${population?.toLocaleString()} people)</div>`;

          hidden = false;
        }
        this._div.innerHTML = innerHTML;
        this._div.hidden = hidden;
      };

      this.info.onAdd = () => {
        this._div = L.DomUtil.create('div', 'l-info');
        this.info.update();
        return this._div;
      };

      return this.info.addTo(this.map);
    }

    style() {
      return {
        fillColor: 'white',
        weight: 1,
        opacity: 1,
        color: this.strokeColor,
        dashArray: '',
        fillOpacity: 0.8,
      };
    }

    getColor(rate) {
      for(let color in this.colors) {
        if(this.colors[color].low <= rate && this.colors[color].high >= rate) {
          console.log(color, rate, this.colors[color].low, this.colors[color].high)
          return color;
        }
      }
    }

    bringLayerToFront(layer) {
      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
        return layer.bringToFront();
      }
    }

    bringLayerToBack(layer) {
      if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
        return layer.bringToBack();
      }
    }

    getLayerById(id) {
      return this.geojson.getLayers().find((l) => l.feature.properties.id == id);
    }

    updateInfo(e) {
      const layer = (e != null ? e.target : undefined) || e;
      if (this.info != null) {
        this.info.update(layer.feature.properties);
      }
      this.bringLayerToFront(layer);
      layer.setStyle({
        color: '#888',
        weight: 3,
        opacity: 1,
      });
    }

    clearInfo(e) {
      const layer = (e != null ? e.target : undefined) || e;
      if (this.info != null) {
        this.info.update(null);
      }
      if (layer.feature.properties.id != this.secondaryId) {
        this.bringLayerToBack(layer);
        return layer.setStyle({
          color: this.strokeColor,
          weight: 1,
          opacity: 1,
        });
      }
    }

    onEachFeature(feature, layer) {
      const handlers = {
        mouseover: this.updateInfo,
        mouseout: this.clearInfo,
      };
      return layer.on(handlers);
    }

    updateMetrics(metrics) {
      this.metrics = metrics
      this.geojson.getLayers().forEach((l) => {
        const place_name = l.feature.properties.name
        l.feature.properties.metric = this.metrics[place_name].rate
        this.geojson.resetStyle(l);
        return l.setStyle({
          fillColor: this.getColor(l.feature.properties.metric),
          fillOpacity: 1,
        });
      });
    }
  };
